#!/usr/bin/env bash

# Filename:      bashful-files
# Description:   Miscellaneous utility functions for dealing with files.
# Maintainer:    Jeremy Cantrell <jmcantrell@gmail.com>
# Last Modified: Fri 2012-07-06 21:47:54 (-0400)

# <doc:bashful-files> {{{
#
# The files library provides functions for working with files/directories.
#
# </doc:bashful-files> }}}

if (( ${BASH_LINENO:-0} == 0 )); then
    source bashful-doc
    doc_execute "$0" "$@"
    exit
fi

[[ $BASHFUL_FILES_LOADED ]] && return

source bashful-messages
source bashful-modes
source bashful-utils

commonpath() #{{{1
{
    # <doc:commonpath> {{{
    #
    # Gets the common path of the paths passed on stdin.
    # Alternatively, paths can be passed as arguments.
    #
    # Usage: commonpath [PATH...]
    #
    # </doc:commonpath> }}}

    local path

    # Make sure command line args go to stdin
    if (( $# > 0 )); then
        for path in "$@"; do
            echo "$path"
        done | commonpath
        return
    fi

    local prefix=$(
        while read -r; do
            echo "$(abspath "$REPLY")/"
        done | commonprefix
    )

    # We only want to break at path separators
    if [[ $prefix != */ ]]; then
        prefix=${prefix%/*}/
    fi

    # Only strip the trailing slash if it's not root (/)
    if [[ $prefix != / ]]; then
        prefix=${prefix%/}
    fi

    echo "$prefix"
}

commontail() #{{{1
{
    # <doc:commontail> {{{
    #
    # Gets the common tails of the paths passed on stdin.
    # Alternatively, paths can be passed as arguments.
    #
    # Usage: commontail [PATH...]
    #
    # Usage examples:
    #     commontail /foo/bar /boo/bar  #==> bar
    #     commontail /foo/bar /boo/far  #==>
    #
    # </doc:commontail> }}}

    local path

    # Make sure command line args go to stdin
    if (( $# > 0 )); then
        for path in "$@"; do
            echo "$path"
        done | commontail
        return
    fi

    local suffix=$(
        while read -r; do
            echo "$(abspath "$REPLY")"
        done | commonsuffix
    )

    echo "${suffix#*/}"
}

extname() #{{{1
{
    # <doc:extname> {{{
    #
    # Get the extension of the given filename.
    #
    # Usage: extname [-n LEVELS] FILENAME
    #
    # Usage examples:
    #     extname     foo.txt     #==> .txt
    #     extname -n2 foo.tar.gz  #==> .tar.gz
    #     extname     foo.tar.gz  #==> .tar.gz
    #     extname -n1 foo.tar.gz  #==> .gz
    #
    # </doc:extname> }}}

    local levels

    unset OPTIND
    while getopts ":n:" option; do
        case $option in
            n) levels=$OPTARG ;;
        esac
    done && shift $(($OPTIND - 1))

    local filename=${1##*/}

    [[ $filename == *.* ]] || return

    local fn=$filename
    local exts ext

    # Detect some common multi-extensions
    if [[ ! $levels ]]; then
        case $(lower <<<$filename) in
            *.tar.gz|*.tar.bz2) levels=2 ;;
        esac
    fi

    levels=${levels:-1}

    for (( i=0; i<$levels; i++ )); do
        ext=.${fn##*.}
        exts=$ext$exts
        fn=${fn%$ext}
        [[ $exts == $filename ]] && return
    done

    echo "$exts"
}

filename() #{{{1
{
    # <doc:filename> {{{
    #
    # Gets the filename of the given path.
    #
    # Usage: filename [-n LEVELS] FILENAME
    #
    # Usage examples:
    #     filename     /path/to/file.txt     #==> file
    #     filename -n2 /path/to/file.tar.gz  #==> file
    #     filename     /path/to/file.tar.gz  #==> file
    #     filename -n1 /path/to/file.tar.gz  #==> file.tar
    #
    # </doc:filename> }}}

    basename "$1" $(extname "$@")
}

increment() #{{{1
{
    # <doc:increment> {{{
    #
    # Get the next filename in line for the given file.
    #
    # Usage: increment FILENAME
    #
    # Usage examples:
    #     increment does_not_exist  #==> does_not_exist
    #     increment does_exist      #==> does_exist (1)
    #     increment does_exist      #==> does_exist (2)
    #
    # </doc:increment> }}}

    local file=$1
    local count=1
    local pattern=${2:- (\{num\})}

    while [[ -e $file ]]; do
        file="${1}${pattern//\{num\}/$((count++))}"
    done

    echo "$file"
}

listdir() #{{{1
{
    # <doc:listdir> {{{
    #
    # List the files in the given directory (1 level deep).
    # Accepts the same options as the find command.
    #
    # Usage: listdir DIR [OPTIONS]
    #
    # </doc:listdir> }}}

    local dir=$1; shift
    find "$dir" -maxdepth 1 -mindepth 1 "$@"
}

files() #{{{1
{
    # <doc:files> {{{
    #
    # List all the files in the given directory (recursively).
    # Will not display hidden files.
    # Accepts the same options as the find command.
    #
    # Usage: files DIR [OPTIONS]
    #
    # </doc:files> }}}

    local dir=$1; shift
    find "$dir" \( -type f -o -type l \) \! -wholename "*/.*" "$@"
}

abspath() #{{{1
{
    # <doc:abspath> {{{
    #
    # Gets the absolute path of the given path.
    # Will resolve paths that contain '.' and '..'.
    # Think readlink without the symlink resolution.
    #
    # Usage: abspath [PATH]
    #
    # </doc:abspath> }}}

    local path=${1:-$PWD}

    # Path looks like: ~user/...
    # Gods of bash, forgive me for using eval
    if [[ $path =~ ~[a-zA-Z] ]]; then
        if [[ ${path%%/*} =~ ^~[[:alpha:]_][[:alnum:]_]*$ ]]; then
            path=$(eval echo $path)
        fi
    fi

    # Path looks like: ~/...
    [[ $path == ~* ]] && path=${path/\~/$HOME}

    # Path is not absolute
    [[ $path != /* ]] && path=$PWD/$path

    path=$(squeeze "/" <<<"$path")

    local elms=()
    local elm
    local OIFS=$IFS; IFS="/"
    for elm in $path; do
        IFS=$OIFS
        [[ $elm == . ]] && continue
        if [[ $elm == .. ]]; then
            elms=("${elms[@]:0:$((${#elms[@]}-1))}")
        else
            elms=("${elms[@]}" "$elm")
        fi
    done
    IFS="/"
    echo "/${elms[*]}"
    IFS=$OIFS
}

relpath() #{{{1
{
    # <doc:relpath> {{{
    #
    # Gets the relative path from SOURCE to DESTINATION.
    # Output should mirror the python function os.path.relpath().
    # All arguments default to the current directory.
    #
    # Usage: relpath [DESTINATION] [SOURCE]
    #
    # Usage examples:
    #     relpath /home/user     /home/user/bin  #==> bin
    #     relpath /home/user/bin /home/user      #==> ..
    #     relpath /foo/bar/baz   /               #==> ../../..
    #     relpath /foo/bar       /baz            #==> ../../baz
    #     relpath /home/user     /home/user      #==> .
    #     relpath                                #==> .
    #
    # </doc:relpath> }}}

    local dst=$(abspath "$1")
    local src=$(abspath "$2")

    local common=$(commonpath "$dst" "$src")

    dst=${dst#$common}; dst=${dst#/}
    src=${src#$common}; src=${src#/}

    local OIFS=$IFS; local IFS=/
    src=($src)
    IFS=$OIFS

    local rel=
    for i in "${!src[@]}"; do
        rel+=../
    done

    rel=${rel}${dst}

    # Handle some corner cases.
    # Arguments were the same path.
    [[ $rel ]] || rel=.
    # Make sure there are no trailing slashes.
    # ...except for root.
    [[ $rel == / ]] || rel=${rel%%/}

    echo "$rel"
}

link() #{{{1
{
    # <doc:link> {{{
    #
    # Version of ln that respects the interactive/verbose settings.
    #
    # Usage: link SOURCE [DESTINATION]
    #
    # </doc:link> }}}

    interactive ${INTERACTIVE:-1}
    verbose     ${VERBOSE:-1}

    $SUDO ln -snT $(interactive_option) $(verbose_echo -v) "$@"
}

linkrel() #{{{1
{
    # <doc:linkrel> {{{
    #
    # Like link, but uses relpath to make the paths relative.
    #
    # Usage: linkrel SOURCE [DESTINATION]
    #
    # </doc:link> }}}

    local dir=$(relpath "${@%/*}")/
    dir=${dir##./}
    link "${dir}${1##*/}" "$2"
}

move() #{{{1
{
    # <doc:move> {{{
    #
    # Version of mv that respects the interactive/verbose settings.
    # Accepts the same options/arguments as mv.
    #
    # </doc:name> }}}

    interactive ${INTERACTIVE:-1}
    verbose     ${VERBOSE:-1}

    $SUDO mv -T $(interactive_option) $(verbose_echo -v) "$@"
}

copy() #{{{1
{
    # <doc:copy> {{{
    #
    # Version of cp that respects the interactive/verbose settings.
    # Accepts the same options/arguments as cp.
    #
    # </doc:copy> }}}

    interactive ${INTERACTIVE:-1}
    verbose     ${VERBOSE:-1}

    $SUDO cp -Tr $(interactive_option) $(verbose_echo -v) "$@"
}

stow() #{{{1
{
    # <doc:stow> {{{
    #
    # Replicate a directory tree and link regular files.
    #
    # </doc:stow> }}}

    local src=$1
    local dst=${2:-$PWD}

    local OIFS=$IFS; IFS=$'\n'
    for f in $(files "$src"); do
        IFS=$OIFS
        local nf=$dst/${f#$src/}
        mkdir -p "$(dirname "$nf")"
        linkrel "$f" "$nf"
    done
}

remove() #{{{1
{
    # <doc:remove> {{{
    #
    # Version of rm that respects the interactive/verbose settings.
    # Accepts the same options/arguments as rm.
    #
    # </doc:remove> }}}

    interactive ${INTERACTIVE:-1}
    verbose     ${VERBOSE:-1}

    $SUDO rm -r $(interactive_option) $(verbose_echo -v) "$@"
}

cleanup() #{{{1
{
    # <doc:cleanup> {{{
    #
    # Cleans up any temp files lying around.
    # Intended to be used alongside tempfile() and not to be called directly.
    #
    # </doc:cleanup> }}}

    for file in "${CLEANUP_FILES[@]}"; do
        $SUDO rm -rf "$file"
    done
}

tempfile() #{{{1
{
    # <doc:tempfile> {{{
    #
    # Creates and keeps track of temp files.
    #
    # Usage examples:
    #     tempfile    # $TEMPFILE is now a regular file
    #
    # </doc:tempfile> }}}

    TEMPFILE=$(mktemp "$@")
    if [[ ! $TEMPFILE ]]; then
        error "Could not create temporary file."
        return 1
    fi
    CLEANUP_FILES=("${CLEANUP_FILES[@]}" "$TEMPFILE")
    trap cleanup INT TERM EXIT
}

tempdir() #{{{1
{
    # <doc:tempdir> {{{
    #
    # Creates and keeps track of temp directories.
    #
    # Usage examples:
    #     tempdir    # $TEMPDIR is now a directory
    #
    # </doc:tempdir> }}}

    tempfile -d -t "$(basename "$0").XXXXXX"
    TEMPDIR=$TEMPFILE
}

truncate() #{{{1
{
    # <doc:truncate> {{{
    #
    # Removes all similar unused files.
    # The only assumption is that the prefix is separated from the identifier
    # by a single hyphen (-).
    #
    # Usage: truncate PREFIX SUFFIX [EXCLUDED_PREFIX...]
    #
    # Usage examples:
    #
    # Given the following files:
    #
    #     file.txt -> file-c.txt
    #     file-a.txt
    #     file-b.txt
    #     file-c.txt
    #
    # The following command:
    #
    #     truncate file .txt
    #
    # Will leave only the following files:
    #
    #     file.txt -> file-c.txt
    #     file-c.txt
    #
    # If you have other files with similar prefixes they will be removed as
    # well. For example, if we also had the following files:
    #
    #     file-foo-a.txt
    #     file-foo-b.txt
    #     file-bar-a.txt
    #     file-bar-b.txt
    #
    # If you want to keep these files, you will have to pass exclusions like:
    #
    #     truncate file .txt file-foo file-bar
    #
    # </doc:truncate> }}}

    local prefix=$1; shift
    local suffix=$1; shift
    local filename=$prefix$suffix

    # There is no symlink to follow
    if [[ ! -L $filename ]]; then
        error "Name not provided or does not exist as a symlink."
        return 1
    fi

    # Get the file to NOT remove
    local target=$(readlink -f "$filename")

    if [[ ! -e $target ]]; then
        error "Target file does not exist."
        return 1
    fi

    local dir=$(dirname "$target")
    local file fn exclude

    for file in "$dir"/$(basename "$prefix")-*$suffix; do
        [[ -f $file ]] || continue
        fn=${file##*/}
        # Make sure file doesn't match an exclusion
        for exclude in "$@"; do
            [[ $fn == $exclude* ]] && continue
        done
        if [[ $file != $target ]]; then
            remove "$file"
        fi
    done
}

backup() #{{{1
{
    # <doc:backup> {{{
    #
    # Backup a file/directory with a timestamp.
    #
    # Usage: backup PATH [DIRECTORY]
    #
    # </doc:backup> }}}

    local f=$1; [[ -z $f || ! -f $f ]] && return 1
    local d=$2; [[ -z $d ]] && d=$(dirname "$f")
    mkdir -p "$d"
    copy "$f" "$d/$TIMESTAMP/$(basename "$f")"
}

#}}}1

BASHFUL_FILES_LOADED=1
