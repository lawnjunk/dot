#!/usr/bin/env bash

# Filename:      bashful-doc
# Description:   Functions for extracting embedded documentation.
# Maintainer:    Jeremy Cantrell <jmcantrell@gmail.com>
# Last Modified: Tue 2011-07-05 00:56:08 (-0400)

# <doc:bashful-doc> {{{
#
# The doc library provides a way to extract documentation from scripts.
#
# Normally, I would prefer to use getopts to setup a -h/--help option, but in
# some cases it isn't practical or it can conflict with other functions. This
# provides a nice alternative with no side-effects.
#
# Within the script, a section of documentation is denoted like this:
#
#     # <doc:NAME>
#     #
#     # DOCUMENTATION TEXT GOES HERE
#     #
#     # </doc:NAME>
#
# </doc:bashful-doc> }}}

if (( ${BASH_LINENO:-0} == 0 )); then
    source bashful-doc
    doc_execute "$0" "$@"
    exit
fi

[[ $BASHFUL_DOC_LOADED ]] && return

source bashful-utils

doc() #{{{1
{
    # <doc:doc> {{{
    #
    # Retrieve embedded documentation from scripts.
    #
    # Usage: doc NAME [FILE...]
    #
    # </doc:doc> }}}

    local name=$1; shift
    embedded_tag "doc:$name" "$@"
}

doc_help() #{{{1
{
    # <doc:doc_help> {{{
    #
    # Display full documentation for a given script/topic.
    #
    # Usage: doc_help SCRIPT [TOPIC]
    #
    # </doc:doc_help> }}}

    local src=$(type -p "$1")
    local cmd=$2
    local cmds

    {
        if [[ $cmd ]]; then
            doc "$cmd" "$src"
        else
            doc "$(basename "$src" .sh)" "$src"
            cmds=$(doc_topics "$src")
            if [[ $cmds ]]; then
                echo -e "\nAvailable topics:\n"
                echo "$cmds" | sed 's/^/    /'
            fi
        fi
    } | pager
}

doc_execute() #{{{1
{
    # <doc:doc_execute> {{{
    #
    # Display the documentation for a given script if there are no arguments
    # or the only argument is "help".
    #
    # Display the documentation for a given topic if the first two arguments
    # are "help" and the topic.
    #
    # If not using one of the help methods, the given command will be executed
    # as if it were run directly.
    #
    # Usage:
    #     doc_execute SCRIPT
    #     doc_execute SCRIPT help [TOPIC]
    #     doc_execute SCRIPT [TOPIC/COMMAND] [OPTIONS] [ARGUMENTS]
    #
    # </doc:doc_execute> }}}

    local src=$(type -p "$1"); shift

    if [[ ! $1 || $1 == help ]]; then
        shift
        doc_help "$src" "$1"
    else
        source "$src"; "$@"
    fi
}

doc_topics() #{{{1
{
    # <doc:doc_topics> {{{
    #
    # Show all doc tags in given files.
    #
    # Usage: doc_topics [FILE...]
    #
    # </doc:doc_topics> }}}

    local src=$(type -p "$1")
    local t="doc"
    local c='^[[:space:]]*#[[:space:]]*'
    local n='<doc:\([^>]*\)>'

    sed -n "/$c$n/p" "$src" |
    sed "s/$c$n.*$/\1/" | sort -u |
    grep -v "^$(basename "$src")$"
}

#}}}1

BASHFUL_DOC_LOADED=1
