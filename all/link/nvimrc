call plug#begin()
" looks
Plug 'tpope/vim-sensible'
Plug 'flazz/vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'kien/rainbow_parentheses.vim'
Plug 'Yggdroot/indentLine'

" lang
Plug 'fatih/vim-go'
Plug 'mattn/emmet-vim'
Plug 'isRuslan/vim-es6'
Plug 'jpalardy/vim-slime'

" edit and format
Plug 'matze/vim-move'
Plug 'Chiel92/vim-autoformat'
Plug 'scrooloose/nerdcommenter'
Plug 'godlygeek/tabular'
Plug 'terryma/vim-multiple-cursors'
Plug 'neomake/neomake'
Plug 'jaawerth/neomake-local-eslint-first'

" hay tools
Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins' }
Plug 'majutsushi/tagbar'
Plug 'christoomey/vim-tmux-navigator'
Plug 'roxma/vim-tmux-clipboard'
Plug 'tpope/vim-fugitive'

function! BuildTern(info)
  if a:info.status == 'installed' || a:info.force
    !npm i
  endif
endfunction
Plug 'ternjs/tern_for_vim', {'do': function('BuildTern') }
Plug 'carlitux/deoplete-ternjs'
call plug#end()


" enable tab competion
let g:deoplete#enable_at_startup = 1
let g:deoplete#file#enable_buffer_path = 1
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" setup defaults
set noswapfile
set backspace=2           " make backspace work like all other apps
set number                " turn on the line numbers
set relativenumber
set incsearch             " vim starts searching while typing search string
set expandtab             " tabs are spaces
set tabstop=2             " tabset two spaces
set shiftwidth=2          " tabset two space
set wildmenu              " enable tab completion
set wildmode=list:longest " configure tab completion
set ruler                 " allways show the current position
set laststatus=2          " allways show the status line
set cursorline            " allways show a line where the curser is
syntax enable             " syntax always on
colorscheme hybrid_reverse" set the color scheme

" map double i to esc and <space> to leader
imap ii <Esc>
let mapleader = "\<Space>"

" set paste and no pase
nnoremap <silent> <leader>sp :set paste<CR>
nnoremap <silent> <leader>sn :set nopaste<CR>

" eash end-line jump
noremap H ^
noremap L $

" quick reload vim config
command! Reload source ~/.nvimrc

" Vim-Airline
let g:airline_powerline_fonts           = 1
let g:airline#extensions#branch#enabled = 1
let g:airline_theme                     = 'base16'

" emmit vim
let g:user_emmet_mode           = 'a'    "enable all function in all mode.
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key     = '<C-K>'
autocmd FileType html,css EmmetInstall

" setup vim-move to use Ctl key
let g:move_key_modifier  = 'C'

" Shortcut to rapidly toggle `set list`
" set list displays invisible chars
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

" neomake
let g:neomake_javascript_enabled_makers = ['eslint']
autocmd! BufWrite *.js Neomake
autocmd! InsertLeave *.js Neomake
hi NeomakeErrorSign ctermfg=white
let g:neomake_javascript_eslint_exe = nrun#Which('eslint')

" show indent line
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_char                 = '│'
let g:indentLine_first_char           = '│'
let g:indentLine_color_term           = 237

" follow sym on open'n file
function! MyFollowSymlink(...)
  let fname = a:0 ? a:1 : expand('%')
  if getftype(fname) != 'link'
    return
  endif
  let resolvedfile = fnameescape(resolve(fname))
  exec 'file' . resolvedfile
endfunction
command! FollowSymlink call MyFollowSymlink()
autocmd BufReadPost * call MyFollowSymlink(expand('<afile>'))

" dem rainbows doh
let g:rbpt_colorpairs = [
    \ ['217',   'lightrose'],
    \ ['229',     'lightyella'],
    \ ['85',     'lightyella'],
    \ ['50',         'lightblue'],
  \ ]

au VimEnter * RainbowParenthesesToggle
au Syntax   * RainbowParenthesesLoadRound
au Syntax   * RainbowParenthesesLoadSquare
au Syntax   * RainbowParenthesesLoadBraces

nmap <leader>t :TagbarToggle<CR>
nmap <leader>b :Autoformat<CR>

" vim slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "1"}
